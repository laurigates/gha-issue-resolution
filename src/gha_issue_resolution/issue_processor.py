"""Module for processing GitHub issues and their comments"""
from typing import Optional, List
from github.Repository import Repository
from github.Issue import Issue
from github.IssueComment import IssueComment
from gha_issue_resolution.ai_utils import analyze_issue
from gha_issue_resolution.file_utils import get_relevant_files
from gha_issue_resolution.pr_handler import create_pr_from_analysis

# Command triggers
TRIGGER_PR_COMMENT = "/create-pr"
TRIGGER_UPDATE_COMMENT = "/update"

# Templates
ANALYSIS_TEMPLATE = """## AI-generated suggestion

Here's a potential solution to this issue, generated by an AI assistant:

{analysis}

To create a pull request with these changes, comment with: `{pr_trigger}`
To get an updated analysis, comment with: `{update_trigger}`

This is an AI-generated response and requires human validation and testing before implementation."""

def get_bot_comments(issue: Issue) -> List[IssueComment]:
    """Get all AI-generated comments on the issue"""
    bot_comments = []
    for comment in issue.get_comments():
        if "AI-generated suggestion" in comment.body or "AI-generated response" in comment.body:
            bot_comments.append(comment)
    return bot_comments

def create_analysis_comment(issue: Issue) -> IssueComment:
    """Generate and post initial analysis comment"""
    print("\nGenerating initial analysis...")
    
    # Get relevant files
    relevant_files = get_relevant_files()
    print(f"\nAnalyzing {len(relevant_files)} relevant files...")
    
    # Get analysis
    analysis_text = analyze_issue(issue, relevant_files)
    
    # Format comment using template
    comment_body = ANALYSIS_TEMPLATE.format(
        analysis=analysis_text,
        pr_trigger=TRIGGER_PR_COMMENT,
        update_trigger=TRIGGER_UPDATE_COMMENT
    )
    
    comment = issue.create_comment(comment_body)
    print(f"\nAdded analysis comment: {comment.html_url}")
    return comment

def check_triggers(comment: IssueComment) -> tuple[bool, bool]:
    """Check if a comment contains trigger commands"""
    if not comment or not hasattr(comment, 'body'):
        return False, False
    
    body = comment.body.strip().lower()
    create_pr = TRIGGER_PR_COMMENT.lower() in body
    update_analysis = TRIGGER_UPDATE_COMMENT.lower() in body
    
    print(f"\nChecking triggers in comment: {body}")
    print(f"Create PR triggered: {create_pr}")
    print(f"Update analysis triggered: {update_analysis}")
    
    return create_pr, update_analysis

def process_issue(repo: Repository, issue: Issue) -> None:
    """Process a GitHub issue and its comments"""
    print(f"\nProcessing issue #{issue.number}: {issue.title}")
    print(f"Issue body: {issue.body}")
    
    # Get any existing bot comments
    bot_comments = get_bot_comments(issue)
    
    # Get the latest comment that triggered this run
    trigger_comment: Optional[IssueComment] = None
    if hasattr(issue, 'comment'):
        trigger_comment = issue.comment
        print(f"\nTriggered by comment: {trigger_comment.body}")
    
    # Check if this is a new issue or needs initial analysis
    if not bot_comments:
        print("\nNo existing analysis found, creating initial analysis...")
        create_analysis_comment(issue)
        return
    
    # If triggered by a comment, check for triggers
    if trigger_comment:
        create_pr, update_analysis = check_triggers(trigger_comment)
        
        if create_pr:
            latest_analysis = bot_comments[-1]
            print("\nPull request creation triggered...")
            create_pr_from_analysis(repo, issue, latest_analysis)
        elif update_analysis:
            print("\nUpdated analysis triggered...")
            create_analysis_comment(issue)
        else:
            print("\nNo action needed for this comment")

# Exports
__all__ = ['process_issue']