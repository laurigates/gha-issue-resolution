from pathlib import Path
from gha_issue_resolution.ai_utils import query_gemini, analyze_issue
from gha_issue_resolution.file_utils import get_repo_structure, get_file_content

TRIGGER_PR_COMMENT = "/create-pr"
TRIGGER_UPDATE_COMMENT = "/update"

def get_relevant_files(repo_structure):
    """Get files that are likely relevant to code changes"""
    relevant_extensions = {'.py', '.js', '.ts', '.jsx', '.tsx', '.html', '.css', '.yml', '.yaml', '.json', '.md', '.txt'}
    files = []
    
    for line in repo_structure.split('\n'):
        if line.strip():
            file_path = line.strip('- ').strip()
            if any(file_path.endswith(ext) for ext in relevant_extensions):
                files.append(file_path)
    
    return files

def create_analysis_comment(issue):
    """Generate and post initial analysis comment"""
    print("\nGenerating initial analysis...")
    
    # Get repository structure and find relevant files
    repo_structure = get_repo_structure()
    print("\nGetting repository files...")
    relevant_files = get_relevant_files(repo_structure)
    
    # Get analysis using file API
    analysis_text = analyze_issue(issue, relevant_files)
    
    comment_body = f"""
    ## AI-generated suggestion

    Here's a potential solution to this issue, generated by an AI assistant:

    {analysis_text}

    To create a pull request with these changes, comment with: `{TRIGGER_PR_COMMENT}`
    To get an updated analysis, comment with: `{TRIGGER_UPDATE_COMMENT}`
    
    This is an AI-generated response and requires human validation and testing before implementation.
    """
    
    comment = issue.create_comment(comment_body)
    print(f"\nAdded initial analysis comment: {comment.html_url}")
    return comment

def create_response_comment(issue, trigger_comment):
    """Generate and post a response to a human comment"""
    print("\nGenerating response to comment...")
    
    # Get the conversation history
    comments = list(issue.get_comments())
    conversation = []
    for comment in comments:
        if comment.user.login == issue.user.login:
            conversation.append(f"User: {comment.body}")
        elif "AI-generated" in comment.body:
            conversation.append(f"Assistant: {comment.body}")
    
    # Get repository structure and find relevant files
    repo_structure = get_repo_structure()
    relevant_files = get_relevant_files(repo_structure)
    
    # Create a prompt that includes conversation history
    file_contents = []
    for file_path in relevant_files:
        if Path(file_path).is_file():
            content = get_file_content(file_path)
            if content.strip():
                file_contents.append((file_path, content))
    
    prompt = f"""
    Please provide a response to this comment in the context of the GitHub issue:
    
    Issue Title: {issue.title}
    Issue Body: {issue.body}
    
    Previous conversation:
    {'\n'.join(conversation)}
    
    Latest comment to respond to:
    {trigger_comment.body}
    
    Please provide:
    1. A direct response to the comment
    2. If code changes are needed, follow the same format as before:
       
       File: path/to/file.py (CURRENT CONTENT)
       ```python
       # Current content
       ```
       
       Changes to make:
       - Description of changes
       
       File: path/to/file.py (WITH CHANGES)
       ```python
       # New content
       ```
    """
    
    response = query_gemini(prompt, file_contents)
    
    comment_body = f"""
    ## AI-generated response

    {response}

    To create a pull request with any code changes suggested above, comment with: `{TRIGGER_PR_COMMENT}`
    To get an updated analysis, comment with: `{TRIGGER_UPDATE_COMMENT}`
    """
    
    comment = issue.create_comment(comment_body)
    print(f"\nAdded response comment: {comment.html_url}")
    return comment

def get_bot_comments(issue):
    """Get all AI-generated comments on the issue"""
    bot_comments = []
    for comment in issue.get_comments():
        if "AI-generated suggestion" in comment.body or "AI-generated response" in comment.body:
            bot_comments.append(comment)
    return bot_comments

def get_human_feedback(issue, last_bot_comment):
    """Get human feedback comments after the last bot comment"""
    all_comments = list(issue.get_comments())
    last_bot_index = all_comments.index(last_bot_comment)
    human_feedback = []
    for comment in all_comments[last_bot_index + 1:]:
        if "AI-generated" not in comment.body:
            human_feedback.append(comment.body)
    return human_feedback

def check_triggers(comment):
    """Check if a comment contains trigger commands"""
    if not comment or not hasattr(comment, 'body'):
        return False, False
    
    body = comment.body.lower()
    return TRIGGER_PR_COMMENT.lower() in body, TRIGGER_UPDATE_COMMENT.lower() in body