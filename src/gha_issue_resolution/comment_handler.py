from pathlib import Path
from gha_issue_resolution.ai_utils import query_gemini, generate_detailed_prompt
from gha_issue_resolution.file_utils import get_repo_structure

def create_analysis_comment(issue):
    """Generate and post initial analysis comment"""
    print("\nGenerating initial analysis...")
    repo_structure = get_repo_structure()
    initial_prompt = f"""
    Analyze this GitHub issue and suggest a solution based on the repository structure:
    
    Issue Title: {issue.title}
    Issue Body: {issue.body}
    
    Repository Structure:
    {repo_structure}
    
    Provide:
    1. A brief analysis of the issue.
    2. A list of files that are likely relevant to this issue (up to 5 files).
    3. An initial approach for solving this issue.
    """
    
    initial_response = query_gemini(initial_prompt)
    
    # Extract file paths from the initial response
    file_paths = [line.split()[-1] for line in initial_response.split('\n') if line.startswith('-') and '.' in line]
    print(f"\nIdentified relevant files: {file_paths}")
    
    # Generate detailed solution
    detailed_prompt = generate_detailed_prompt(issue, initial_response, file_paths)
    print("\nGenerating detailed solution...")
    detailed_solution = query_gemini(detailed_prompt)
    
    comment_body = f"""
    ## AI-generated suggestion

    Here's a potential solution to this issue, generated by an AI assistant:

    {detailed_solution}

    I can create a pull request with these suggested changes. Please review the suggestion and add any additional comments or requirements.
    This is an AI-generated response and requires human validation and testing before implementation.
    """
    
    comment = issue.create_comment(comment_body)
    print(f"\nAdded initial analysis comment: {comment.html_url}")
    return comment

def get_bot_comments(issue):
    """Get all AI-generated comments on the issue"""
    bot_comments = []
    for comment in issue.get_comments():
        if "AI-generated suggestion" in comment.body:
            bot_comments.append(comment)
    return bot_comments

def get_human_feedback(issue, last_bot_comment):
    """Get human feedback comments after the last bot comment"""
    all_comments = list(issue.get_comments())
    last_bot_index = all_comments.index(last_bot_comment)
    human_feedback = []
    for comment in all_comments[last_bot_index + 1:]:
        if "AI-generated suggestion" not in comment.body:
            human_feedback.append(comment.body)
    return human_feedback